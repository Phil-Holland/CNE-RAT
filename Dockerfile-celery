# unfortunately, CNEFinder's requirements are quite specific, and so the easiest way
# to install everything nicely is to work off of the bioconductor docker image. In the
# future, a nicer solution would be to work from a generic Linux image and obtain only
# the very necessary requirements
FROM bioconductor/release_core2

# install any system requirements - including a basic python 3 install
RUN apt-get update && apt-get upgrade -y --fix-missing
RUN apt-get update && apt-get install -y --no-install-recommends \
	locate \
	libssl-dev \
	libffi-dev \
	libffi-dev \
	libbz2-dev \
	liblzma-dev \
	libpcre3-dev \
	python3.5 \
	python3.5-gdbm \
	python3-pip \
	python3-setuptools \
	python3-dev \
	python3-wheel \
	libreadline-dev \
	libgsl2 \
	libgsl-dev \
	libmpfr-dev \
	texlive-binaries \
	build-essential \
	libboost-all-dev \
	autotools-dev \
	automake \
	autoconf \
	curl

# install viennarna binaries and development libraries
RUN curl -L https://www.tbi.univie.ac.at/RNA/download/debian/debian_9_0/viennarna_2.4.11-1_amd64.deb --output viennarna.deb
RUN dpkg -i viennarna.deb

RUN curl -L https://www.tbi.univie.ac.at/RNA/download/debian/debian_9_0/viennarna-dev_2.4.11-2_amd64.deb --output viennarna-dev.deb
RUN dpkg -i viennarna-dev.deb

RUN apt-get install -f -y

# download, build and install intarna
RUN curl -L https://github.com/BackofenLab/IntaRNA/archive/v2.4.0.tar.gz --output intarna.tar.gz
RUN tar xvf intarna.tar.gz
RUN cd IntaRNA-2.4.0 && chmod a+x autotools-init.sh && ./autotools-init.sh && ./configure && make && make install

# clean up
RUN rm viennarna.deb && rm viennarna-dev.deb && rm intarna.tar.gz && rm -r IntaRNA-2.4.0

# add and build cnefinder - do this before adding all files for better caching
ADD ./cnefinder /app/cnefinder
WORKDIR /app/cnefinder/source
RUN bash -c ./pre-install.sh
RUN make -f Makefile

# install python requirements - do this before adding all files for better caching
ADD requirements.txt /app/requirements.txt
RUN pip3 install -r /app/requirements.txt

RUN pip3 install rpy2==2.9.4

# add all files to the working directory
ADD . /app

# make two directories on the system to store worker logs
RUN mkdir -p /var/log/celery
RUN mkdir -p /var/run/celery

# define the container start script
WORKDIR /app
ENTRYPOINT ["sh", "celery_start_script.sh"]